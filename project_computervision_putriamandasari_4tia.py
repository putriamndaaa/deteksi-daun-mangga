# -*- coding: utf-8 -*-
"""Project_ComputerVision_PutriAmandaSari_4TIA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zGH986kcAEzQSyp-tZisX0__o33KVsDO

Deteksi Penyakit Pada Daun Mangga Menggunakan CNN

Import Library
"""

import tensorflow as tf #Membangun model deep learning (CNN)dgn Keras dan TensorFlow
from tensorflow.keras.preprocessing.image import ImageDataGenerator # Untuk augmentasi dan pembacaan gambar dari folder
from tensorflow.keras.models import Sequential # untuk model berurutan(layer disusun linear)
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout #blok dasar dari CNN untuk klasifikasi gambar

"""Memanggil dataset"""

from google.colab import drive # fungsi bawaaan colab untuk akses G.drive
drive.mount('/content/drive') # minta izin untuk akses akun drive

dataset_dir = '/content/drive/MyDrive/Semester 8/Computer Vision/MangoLeafBD Dataset' #menuju dataset daun mangga yang ada di drive

"""Menentukan ukuran gambar dan batchnya"""

img_height, img_width = 150, 150 # Menentukan ukuran gambar yang akan dimasukkan ke model.
batch_size = 32

""" Image Augmentation & Preprocessing"""

train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,  # 20% validasi     # 80% data untuk training, 20% untuk validasi
    rotation_range=20,
    zoom_range=0.15,         # Membantu model generalisasi lebih baik dengan variasi diputar diperbesar dan diperkecil
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

"""train_generator = digunakan untuk melatih model (fit)

validation_generator = digunakan untuk mengevaluasi model saat pelatihan
"""

train_generator = train_datagen.flow_from_directory( #Membaca gambar langsung dari struktur folder
    dataset_dir,
    target_size=(img_height, img_width), # Semua gambar 150X150 pixel
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)
validation_generator = train_datagen.flow_from_directory(
    dataset_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

"""Membangun Model CNN"""

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(img_height, img_width, 3)),# Menangkap fitur dasar seperti tepi dan warna.
    MaxPooling2D(2,2), # Mengurangi ukuran data sambil mempertahankan fitur penting.

    Conv2D(64, (3,3), activation='relu'),# Menangkap fitur lebih kompleks seperti bentuk atau pola bercak daun.
    MaxPooling2D(2,2),# Menangkap fitur lebih kompleks seperti bentuk atau pola bercak daun.

    Conv2D(128, (3,3), activation='relu'), # Layer ketiga dengan 128 filter.
    MaxPooling2D(2,2), # Layer ketiga dengan 128 filter.

    Flatten(),# mengubah dari 3D menjadi 1D
    Dense(128, activation='relu'),# menggabungkan fitur-fitur dan membuat prediksi.
    Dropout(0.5),
    Dense(4, activation='softmax')  # Output layer untuk 4 kelas
])

"""Kompilasi Model"""

model.compile( # mengkonfigurasi model sebelum dilatih
    optimizer='adam',
    loss='categorical_crossentropy',  # untuk multiclass
    metrics=['accuracy']
)

"""Menampilkan Ringkasan Model

Membantu mengetahui apakah model terlalu kompleks atau terlalu kecil.
"""

model.summary() #menampilkan ringkasan arsitektur model

"""Training Model"""

epochs = 10 # menggunakan 10 epoch
history = model.fit( # menyimpan hasil training, termasuk loss dan accuracy per epoch.
    train_generator,
    validation_data=validation_generator,
    epochs=epochs
)

"""Menyimpan Model"""

model.save('model_mango_leaf_multiclass_cnn.h5')
#Menyimpan model yang telah dilatih dalam format .h5.

from google.colab import files
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from tensorflow.keras.models import load_model

# Load model
model = load_model('model_mango_leaf_multiclass_cnn.h5')

# Label kelas dan solusi sesuai urutan kelas
class_labels = ['Bacterial Canker', 'Gall Midge', 'Healthy', 'Sooty Mould']
solutions = {
    'Bacterial Canker': 'Potong bagian yang terinfeksi dan semprotkan bakterisida.',
    'Gall Midge': 'Pangkas daun yang terkena dan gunakan insektisida.',
    'Sooty Mould': 'Bersihkan jamur dengan air sabun ringan.',
    'Healthy': 'Daun sehat, tidak memerlukan tindakan.'
}

# Upload gambar
uploaded = files.upload()

for fn in uploaded.keys():
    # Tampilkan gambar
    img = Image.open(fn)
    plt.imshow(img)
    plt.axis('off')
    plt.title("Gambar yang Diunggah")
    plt.show()

# Preprocessing
img = img.resize((150, 150))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

# Prediksi
prediction = model.predict(img_array)
class_index = np.argmax(prediction)
class_name = class_labels[class_index]

# Output prediksi dan solusi
print(f"âœ… Hasil Prediksi Daun: {class_name}")
print(f"ðŸ’¡ Solusi: {solutions[class_name]}")